[
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Reducing Post-Harvest Losses",
    "section": "",
    "text": "Post-harvest losses (PHL) are a critical barrier to food security, economic growth, and youth engagement in Nigeria’s agricultural sector. According to FMARD, 30–50% of perishable produce is lost annually due to inadequate storage, poor logistics, and weak market systems. This amounts to nearly $9 billion in annual losses (World Bank), equivalent to millions of missed meals and missed business opportunities.\nThis project explores how data-driven solutions can be used to predict, prevent, and reduce these losses — turning agriculture into a viable and attractive sector for Nigeria’s youth."
  },
  {
    "objectID": "documentation.html#datasets-used",
    "href": "documentation.html#datasets-used",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.1 Datasets Used",
    "text": "3.1 Datasets Used\n\n\n\n\n\n\n\n\nDataset Name\nDescription\nSource\n\n\n\n\nNASS Crop Production Survey\nProduction and storage patterns by crop\nNational Bureau of Statistics\n\n\nClimate Data\nRegional rainfall and temperature patterns\nNigerian Meteorological Agency (NiMet)\n\n\nFAO Post-Harvest Loss Surveys\nCountry-specific food loss reports\nFAO & World Bank\n\n\nCustom Survey Data\nLosses by crop, region, storage & logistics method\nTeam-designed field survey"
  },
  {
    "objectID": "documentation.html#data-collection-cleaning",
    "href": "documentation.html#data-collection-cleaning",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.2 Data Collection & Cleaning",
    "text": "3.2 Data Collection & Cleaning\n\nData imported from [source or format]\nSurveyed farmers in 6 geopolitical zones\nIntegrated geospatial data with market distance, road quality, and temperature\nCoded crop type, storage duration, and spoilage cause\nCleaned nulls, standardized seasonal formats, and geotagged records\nMissing values handled using [method]\nOutliers and anomalies checked using [techniques]\nFeature engineering applied to variables like loan amount, repayment history, crop type, etc."
  },
  {
    "objectID": "documentation.html#exploratory-data-analysis-eda",
    "href": "documentation.html#exploratory-data-analysis-eda",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.3 Exploratory Data Analysis (EDA)",
    "text": "3.3 Exploratory Data Analysis (EDA)\n\n # Sample PHL Rate by Crop and Region\nlibrary(ggplot2)\n\nggplot(data, aes(x = Crop, y = LossRate, fill = Region)) +\n  geom_col(position = \"dodge\") +\n  labs(title = \"Post-Harvest Loss Rate by Crop and Region\", x = \"Crop\", y = \"Loss (%)\")\n\nKey insights:\n-Tomatoes and leafy vegetables experience highest losses in southern states.\n-Loss rates spike during peak rainy seasons due to poor road access and humidity.\n-Regions with fewer storage facilities or long market routes show higher PHL."
  },
  {
    "objectID": "documentation.html#interactive-map-of-high-risk-zones",
    "href": "documentation.html#interactive-map-of-high-risk-zones",
    "title": "Reducing Post-Harvest Losses",
    "section": "4.1 Interactive Map of High-Risk Zones",
    "text": "4.1 Interactive Map of High-Risk Zones\n[Use leaflet to display regions with highest recorded PHL by crop and season.]\n\nlibrary(leaflet)\n\nleaflet(data) %&gt;%\n  addTiles() %&gt;%\n  addCircleMarkers(~longitude, ~latitude,\n                   color = ~phl_color, radius = 5,\n                   popup = ~paste(\"Crop:\", Crop, \"&lt;br&gt;\", \"Loss Rate:\", LossRate, \"%\"))"
  },
  {
    "objectID": "documentation.html#risk-profile-example",
    "href": "documentation.html#risk-profile-example",
    "title": "Reducing Post-Harvest Losses",
    "section": "4.2 Risk Profile Example",
    "text": "4.2 Risk Profile Example\n\n\n\n\n\n\n\n\nRisk Factor\nRisk Score\nMitigation\n\n\n\n\nNo cold storage nearby\nHigh\nColdHub Solar Fridges\n\n\nPeak Rainfall Season\nHigh\nMobile Drying Stations\n\n\n\n40Km to Market\n\nMedium\nPartner with Logistics"
  },
  {
    "objectID": "documentation.html#model-predicting-phl-risk",
    "href": "documentation.html#model-predicting-phl-risk",
    "title": "Reducing Post-Harvest Losses",
    "section": "5.1 Model: Predicting PHL Risk",
    "text": "5.1 Model: Predicting PHL Risk\n\n# Random Forest model to predict PHL likelihood\nlibrary(randomForest)\n\nphl_model &lt;- randomForest(LossRate ~ Crop + Region + Season + DistanceToMarket + StorageType,\n                          data = data, ntree = 100)\n\nprint(phl_model)"
  },
  {
    "objectID": "documentation.html#performance-summary",
    "href": "documentation.html#performance-summary",
    "title": "Reducing Post-Harvest Losses",
    "section": "5.2 Performance Summary",
    "text": "5.2 Performance Summary\n\nRMSE: XX%\nTop Predictors: Crop Type, Season, Storage Access"
  },
  {
    "objectID": "documentation.html#concept-agrishield-nigeria",
    "href": "documentation.html#concept-agrishield-nigeria",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.1 Concept: AgriShield Nigeria",
    "text": "6.1 Concept: AgriShield Nigeria\nAn integrated digital platform that:\n\nPredicts PHL hotspots using real-time weather, market, and crop data\nConnects farmers to ColdHubs (solar-powered storage)\nLinks to logistics via APIs like Hello Tractor or local startups\nOffers a mobile dashboard for young farmers to:\n\n-    Monitor expected spoilage\n\n-    Book cold storage or transport slots\n\n-    View optimal harvest/market times"
  },
  {
    "objectID": "documentation.html#real-world-models-to-re-implement",
    "href": "documentation.html#real-world-models-to-re-implement",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.2 Real-World Models to Re-Implement",
    "text": "6.2 Real-World Models to Re-Implement\n\n\n\n\n\n\n\n\nReal- World Solution\nFunction\nRe-Implementation\n\n\n\n\nColdHubs (Nigeria)\nSolar - powered walk in cold rooms\nExpand via co-op partnerships or youth-owned units\n\n\nTwiga Foods (Kenya)\nDigital supply chain, logistics & demand matching\nDevelop a local app connecting smallholders to bulk buyers\n\n\nHello Tractor (Nigeria)\nTractor sharing platform\nExtend to cold truck or mobile dryer sharing\n\n\nKoolboks (Africa)\nSolar freezers with pay-as-you-go\nUse for high-spoilage zones in fruit & vegetable corridors\n\n\nAgUnity (Global)\nBlockchain recordkeeping for farmers\nPilot digital ledgers for PHL tracking and transparency"
  },
  {
    "objectID": "documentation.html#impact-for-youth",
    "href": "documentation.html#impact-for-youth",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.3 Impact for Youth",
    "text": "6.3 Impact for Youth\n\nUnlocks new agri-business models (e.g., storage-as-a-service).\nBuilds digital skills through mobile app management.\nIncreases profitability and encourages retention in the value chain."
  },
  {
    "objectID": "documentation.html#prototype-features-bonus",
    "href": "documentation.html#prototype-features-bonus",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.4 Prototype Features (Bonus)",
    "text": "6.4 Prototype Features (Bonus)\n\nSmallholder version: SMS interface to book storage or transport\nInvestor dashboard: Highlight PHL investment needs by region\nFarmer education popups: e.g., “Dry maize to 13% moisture before storing”"
  },
  {
    "objectID": "documentation.html#conclusion",
    "href": "documentation.html#conclusion",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.5 Conclusion",
    "text": "6.5 Conclusion\nBy combining predictive analytics, mobile platforms, and logistics innovation, this solution empowers Nigeria’s youth to lead a revolution in agricultural efficiency — reducing waste and turning risk into opportunity."
  },
  {
    "objectID": "clean/clean.html",
    "href": "clean/clean.html",
    "title": "Processing Post-Harvest datasets",
    "section": "",
    "text": "import pandas as pd\ndef transform_data(sheets_dict: dict[pd.DataFrame], \n                   lookup: dict[str,str], \n                   file_origin: str) -&gt; pd.DataFrame:\n    # mapping from file_origin to rec_type letter\n    rec_map = {\n        \"harvested_area\": \"H\",\n        \"physical_area\":  \"A\",\n        \"yield\":          \"Y\",\n        \"production\":     \"P\"\n    }\n    # mapping tech suffix → human label\n    tech_map = {\n        \"A\": \"all technologies\",\n        \"I\": \"irrigation\",\n        \"R\": \"rainfed\"\n    }\n    rec_code = rec_map[file_origin]\n    \n    long_dfs = []\n    for sheet_name, df in sheets_dict.items():\n        # 1) infer tech_type from sheet name suffix (_TA, _TI, _TR → A, I, R)\n        if sheet_name.endswith(\"(TA)\"):\n            tech = \"A\"\n        elif sheet_name.endswith(\"(TI)\"):\n            tech = \"I\"\n        elif sheet_name.endswith(\"(TR)\"):\n            tech = \"R\"\n        else:\n            raise ValueError(f\"Unrecognized tech suffix in '{sheet_name}'\")\n        \n        # 2) Rename x/y → latitude/longitude\n        df = df.rename(columns={\n            \"x\": lookup[\"x\"],\n            \"y\": lookup[\"y\"]\n        })\n        \n        # 3) Rename each crop column: e.g. BANA_I → Banana_I\n        rename_map = {}\n        for col in df.columns:\n            if col.upper().endswith(f\"_{tech}\"):\n                prefix = col.rsplit(\"_\", 1)[0].lower()  # e.g. \"bana\"\n                full_crop = lookup.get(prefix)\n                if full_crop is None:\n                    # skip any non-crop or unexpected\n                    continue\n                rename_map[col] = f\"{full_crop}_{tech}\"\n        df = df.rename(columns=rename_map)\n        \n        # 4) Melt to long: keep all non-crop columns as id_vars\n        crop_cols = list(rename_map.values())\n        id_vars = [c for c in df.columns if c not in crop_cols]\n        df_long = df.melt(\n            id_vars=id_vars,\n            value_vars=crop_cols,\n            var_name=\"variable\",\n            value_name=\"value\"\n        )\n        \n        # 5) Split “variable” → Crop type & tech_type\n        df_long[\"tech_type\"] = df_long[\"variable\"].str[-1]\n        df_long[\"Crop type\"] = df_long[\"variable\"].str[:-2]\n        df_long = df_long.drop(columns=[\"variable\"])\n        \n        # 6) Add water‐management regime & rec_type\n        df_long[\"water‐management regime\"] = df_long[\"tech_type\"].map(tech_map)\n        df_long[\"rec_type\"] = rec_code\n        \n        # 7) Reorder & select final columns\n        final_cols = [\n            lookup[\"y\"],              # latitude of pixel center\n            lookup[\"x\"],              # longitude of pixel center\n            \"Crop type\",\n            \"tech_type\",\n            \"water‐management regime\",\n            \"rec_type\",\n            \"ADM1_NAME\",\n            \"ADM2_NAME\",\n            \"unit\",\n            \"grid_code\",\n            \"year_data\",\n            \"value\"\n        ]\n        # (rename latitude/longitude to the exact strings)\n        df_long = df_long[final_cols]\n        \n        long_dfs.append(df_long)\n    \n    # 8) Concatenate all tech-types for this file\n    result = pd.concat(long_dfs, ignore_index=True)\n    return result\n\n# Example usage:\n# import json\n# lookup = json.load(open(\"lookup.json\"))\n# harvested_sheets = pd.read_excel(\"harvested_area.xlsx\", sheet_name=None)\n# ha_long = transform_data(harvested_sheets, lookup, \"harvested_area\")\n# physical_sheets = pd.read_excel(\"physical_area.xlsx\", sheet_name=None)\n# pa_long = transform_data(physical_sheets, lookup, \"physical_area\")\n# ... and similarly for yield & production\nimport json\nlookup = json.load(open(\"lookup.json\"))\nharvested_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/harvested_area.xlsx\", sheet_name=None)\nha_long = transform_data(harvested_sheets, lookup, \"harvested_area\")\nphysical_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/Physical_area.xlsx\", sheet_name=None)\npa_long = transform_data(physical_sheets, lookup, \"physical_area\")\nha_long\n\n\n\n\n\n\n\n\nlongitude of pixel center\nlatitude of pixel center\nCrop type\ntech_type\nwater‐management regime\nrec_type\nADM1_NAME\nADM2_NAME\nunit\ngrid_code\nyear_data\nvalue\n\n\n\n\n0\n13.87500\n5.54167\nBanana\nA\nall technologies\nH\nSokoto\nIllela\nha\n3946386\navg(2019-2021)\n0.0\n\n\n1\n13.79170\n5.37500\nBanana\nA\nall technologies\nH\nSokoto\nGada\nha\n3950704\navg(2019-2021)\n0.0\n\n\n2\n13.79170\n5.79167\nBanana\nA\nall technologies\nH\nSokoto\nIllela\nha\n3950709\navg(2019-2021)\n0.0\n\n\n3\n13.70830\n4.70833\nBanana\nA\nall technologies\nH\nSokoto\nGudu\nha\n3955016\navg(2019-2021)\n0.0\n\n\n4\n13.70830\n4.79167\nBanana\nA\nall technologies\nH\nSokoto\nGudu\nha\n3955017\navg(2019-2021)\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1136333\n4.37500\n6.54167\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4438878\navg(2019-2021)\n0.7\n\n\n1136334\n4.37500\n6.62500\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4438879\navg(2019-2021)\n17.7\n\n\n1136335\n4.37500\n6.79167\nYams\nR\nrainfed\nH\nRivers\nAkuku-Toru\nha\n4438881\navg(2019-2021)\n1.9\n\n\n1136336\n4.29167\n6.12500\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4443193\navg(2019-2021)\n11.1\n\n\n1136337\n4.29167\n6.20833\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4443194\navg(2019-2021)\n16.8\n\n\n\n\n1136338 rows × 12 columns\nlookup = json.load(open(\"lookup.json\"))\nProduction_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/Production.xlsx\", sheet_name=None)\nProd_long = transform_data(Production_sheets, lookup, \"production\")\nyield_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/yield.xlsx\", sheet_name=None)\nyield_long = transform_data(yield_sheets, lookup, \"yield\")\n# Save the transformed data to excel (XLSX) files\nha_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/harvested_long.xlsx\", index=False)\npa_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/physical_long.xlsx\", index=False)\nyield_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/yield_long.xlsx\", index=False)\nProd_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/production_long.xlsx\", index=False)"
  },
  {
    "objectID": "clean/clean.html#other-datasets",
    "href": "clean/clean.html#other-datasets",
    "title": "Processing Post-Harvest datasets",
    "section": "Other datasets",
    "text": "Other datasets\n\nimport os\nimport pandas as pd\n\ndef extract_data(folder_path):\n    extracted_data = {}\n    suffix_counter = {}\n\n    for file_name in os.listdir(folder_path):\n        file_path = os.path.join(folder_path, file_name)\n        base_name, ext = os.path.splitext(file_name)\n\n        if ext.lower() in ['.csv', '.xlsx', '.xls']:\n            try:\n                if ext.lower() == '.csv':\n                    # Single DataFrame for CSV\n                    df_dict = {base_name: pd.read_csv(file_path)}\n                else:\n                    # Read all sheets into a dict of DataFrames\n                    df_dict = pd.read_excel(file_path, sheet_name=None)\n                    # Prefix sheet names with base filename\n                    df_dict = {f\"{base_name}_{sheet_name}\": df\n                               for sheet_name, df in df_dict.items()}\n\n                for key, df in df_dict.items():\n                    unique_key = key\n                    # Handle key collisions\n                    if unique_key in extracted_data:\n                        # Initialize counter for this key if needed\n                        if key not in suffix_counter:\n                            suffix_counter[key] = 1\n                        suffix_counter[key] += 1\n                        unique_key = f\"{key}_{suffix_counter[key]}\"\n\n                    extracted_data[unique_key] = df\n\n            except Exception as e:\n                print(f\"Error processing file {file_name}: {e}\")\n\n    return extracted_data\n\n\n#Specify full folder path to the dataset\ndf = extract_data(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset\")\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_30472\\4012688409.py:16: DtypeWarning: Columns (1,3,4,5,6,7,8,9,10,11,12) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_dict = {base_name: pd.read_csv(file_path)}\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_30472\\4012688409.py:16: DtypeWarning: Columns (4,5,6,9,14,15) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_dict = {base_name: pd.read_csv(file_path)}\n\n\n\ndf.keys()\n\ndict_keys(['Data', 'FAOSTAT_data_en_5-8-2025', 'global-market-monitor_subnational', 'nga-rainfall-adm2-full', 'Population data', 'wfp_food_prices_nga'])\n\n\n\nlogistics= df['Data']\n\n\nlogistics.columns\n\nIndex(['m49_code', 'country', 'region', 'cpc_code', 'commodity', 'year',\n       'loss_percentage', 'loss_percentage_original', 'loss_quantity',\n       'activity', 'food_supply_stage', 'treatment', 'cause_of_loss',\n       'sample_size', 'method_data_collection', 'reference', 'url', 'notes'],\n      dtype='object')\n\n\n\nlogistics=logistics[(logistics['year'] &gt;= 2019) & (logistics['year'] &lt;= 2021)][['m49_code', 'country', 'region', 'cpc_code', 'commodity', 'year',\n        'loss_percentage', 'loss_percentage_original', 'loss_quantity',\n        'activity', 'food_supply_stage', 'treatment', 'cause_of_loss',\n        'sample_size', 'method_data_collection']]\n\n\nlogistics.fillna(\"N/A\", inplace=True)\n\n\nlogistics\n\n\n\n\n\n\n\n\nm49_code\ncountry\nregion\ncpc_code\ncommodity\nyear\nloss_percentage\nloss_percentage_original\nloss_quantity\nactivity\nfood_supply_stage\ntreatment\ncause_of_loss\nsample_size\nmethod_data_collection\n\n\n\n\n0\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n2.372590\n2.37259\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n1\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n4.585730\n4.58573\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n2\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n6.420000\n6.42\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n3\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n4.000000\n4\nN/A\nDrying\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n4\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n1.320000\n1.32\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n5\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n2.500000\n2.5\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n6\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n4.403330\n4.40333\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n7\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n3.137140\n3.13714\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n8\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n0.980316\n0.980316\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n9\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n1.250000\n1.25\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n10\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n3.600000\n3.6\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n11\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n2.592950\n2.59295\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n12\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n4.550000\n4.55\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n13\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n2.166670\n2.16667\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n14\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n3.500000\n3.5\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n15\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n2.000000\n2\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n16\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n1.103170\n1.10317\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n17\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n2.500000\n2.5\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n18\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n0.793649\n0.793649\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n19\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n6.420000\n6.42\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n20\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n1.320000\n1.32\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n21\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n4.000000\n4\nN/A\nDrying\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n22\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n4.716320\n4.71632\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n23\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n2.372950\n2.37295\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n24\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n1.250000\n1.25\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n25\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n2.500000\n2.5\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n26\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n3.137140\n3.13714\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n27\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n0.931262\n0.931262\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n28\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n4.403330\n4.40333\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n29\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n2.604060\n2.60406\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n30\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n2.166670\n2.16667\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n31\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n4.550000\n4.55\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n32\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n3.600000\n3.6\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n33\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n1.315950\n1.31595\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n34\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n3.500000\n3.5\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n35\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n0.851044\n0.851044\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n36\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n2.500000\n2.5\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n37\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n2.000000\n2\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n38\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n1.320000\n1.32\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n39\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n4.718790\n4.71879\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n40\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n2.372890\n2.37289\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n41\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n4.000000\n4\nN/A\nDrying\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n42\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n6.420000\n6.42\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n43\n566\nNigeria\nBenue\n113.0\nRice\n2019\n1.250000\n1.25\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n44\n566\nNigeria\nBenue\n113.0\nRice\n2019\n2.500000\n2.5\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n45\n566\nNigeria\nBenue\n113.0\nRice\n2019\n3.137140\n3.13714\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n46\n566\nNigeria\nBenue\n113.0\nRice\n2019\n4.403330\n4.40333\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n47\n566\nNigeria\nBenue\n113.0\nRice\n2019\n0.930734\n0.930734\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n48\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n4.550000\n4.55\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n49\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n3.600000\n3.6\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n50\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n2.604770\n2.60477\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n51\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n2.166670\n2.16667\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n52\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n0.851228\n0.851228\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n53\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n3.500000\n3.5\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n54\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n2.500000\n2.5\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n55\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n1.316630\n1.31663\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n56\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n2.000000\n2\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates"
  }
]