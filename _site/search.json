[
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Reducing Post-Harvest Losses",
    "section": "",
    "text": "Post-harvest losses (PHL) are a critical barrier to food security, economic growth, and youth engagement in Nigeria’s agricultural sector. According to FMARD, 30–50% of perishable produce is lost annually due to inadequate storage, poor logistics, and weak market systems. This amounts to nearly $9 billion in annual losses (World Bank), equivalent to millions of missed meals and missed business opportunities.\nThis project explores how data-driven solutions can be used to predict, prevent, and reduce these losses — turning agriculture into a viable and attractive sector for Nigeria’s youth."
  },
  {
    "objectID": "documentation.html#datasets-used",
    "href": "documentation.html#datasets-used",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.1 Datasets Used",
    "text": "3.1 Datasets Used\nThis document provides an overview of datasets related to post-harvest losses, food prices, logistics, market access, and population dynamics in Nigeria. All datasets are stored in Excel format and compiled from multiple credible sources."
  },
  {
    "objectID": "documentation.html#data-collection-cleaning",
    "href": "documentation.html#data-collection-cleaning",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.3 Data Collection & Cleaning",
    "text": "3.3 Data Collection & Cleaning\n\nData were downloaded from source and imported\nIntegrated geospatial data with market distance, road quality, and temperature\nVariable names were cleaned and rensme e.g crop type, storage duration, and spoilage cause\nCleaned nulls, standardized seasonal formats, and geotagged records\nMissing values handled were left as missing as they are less than 5% of the data"
  },
  {
    "objectID": "documentation.html#exploratory-data-analysis-eda",
    "href": "documentation.html#exploratory-data-analysis-eda",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.4 Exploratory Data Analysis (EDA)",
    "text": "3.4 Exploratory Data Analysis (EDA)\n\n # Sample PHL Rate by Crop and Region\nlibrary(ggplot2)\n\nggplot(data, aes(x = Crop, y = LossRate, fill = Region)) +\n  geom_col(position = \"dodge\") +\n  labs(title = \"Post-Harvest Loss Rate by Crop and Region\", x = \"Crop\", y = \"Loss (%)\")\n\nKey insights:\n-Tomatoes and leafy vegetables experience highest losses in southern states.\n-Loss rates spike during peak rainy seasons due to poor road access and humidity.\n-Regions with fewer storage facilities or long market routes show higher PHL."
  },
  {
    "objectID": "documentation.html#interactive-map-of-high-risk-zones",
    "href": "documentation.html#interactive-map-of-high-risk-zones",
    "title": "Reducing Post-Harvest Losses",
    "section": "4.1 Interactive Map of High-Risk Zones",
    "text": "4.1 Interactive Map of High-Risk Zones\n[Use leaflet to display regions with highest recorded PHL by crop and season.]\n\nlibrary(leaflet)\n\nleaflet(data) %&gt;%\n  addTiles() %&gt;%\n  addCircleMarkers(~longitude, ~latitude,\n                   color = ~phl_color, radius = 5,\n                   popup = ~paste(\"Crop:\", Crop, \"&lt;br&gt;\", \"Loss Rate:\", LossRate, \"%\"))"
  },
  {
    "objectID": "documentation.html#risk-profile-example",
    "href": "documentation.html#risk-profile-example",
    "title": "Reducing Post-Harvest Losses",
    "section": "4.2 Risk Profile Example",
    "text": "4.2 Risk Profile Example\n\n\n\n\n\n\n\n\nRisk Factor\nRisk Score\nMitigation\n\n\n\n\nNo cold storage nearby\nHigh\nColdHub Solar Fridges\n\n\nPeak Rainfall Season\nHigh\nMobile Drying Stations\n\n\n\n40Km to Market\n\nMedium\nPartner with Logistics"
  },
  {
    "objectID": "documentation.html#model-predicting-phl-risk",
    "href": "documentation.html#model-predicting-phl-risk",
    "title": "Reducing Post-Harvest Losses",
    "section": "5.1 Model: Predicting PHL Risk",
    "text": "5.1 Model: Predicting PHL Risk\n\n# Random Forest model to predict PHL likelihood\nlibrary(randomForest)\n\nphl_model &lt;- randomForest(LossRate ~ Crop + Region + Season + DistanceToMarket + StorageType,\n                          data = data, ntree = 100)\n\nprint(phl_model)"
  },
  {
    "objectID": "documentation.html#performance-summary",
    "href": "documentation.html#performance-summary",
    "title": "Reducing Post-Harvest Losses",
    "section": "5.2 Performance Summary",
    "text": "5.2 Performance Summary\n\nRMSE: XX%\nTop Predictors: Crop Type, Season, Storage Access"
  },
  {
    "objectID": "documentation.html#concept-agrishield-nigeria",
    "href": "documentation.html#concept-agrishield-nigeria",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.1 Concept: AgriShield Nigeria",
    "text": "6.1 Concept: AgriShield Nigeria\nAn integrated digital platform that:\n\nPredicts PHL hotspots using real-time weather, market, and crop data\nConnects farmers to ColdHubs (solar-powered storage)\nLinks to logistics via APIs like Hello Tractor or local startups\nOffers a mobile dashboard for young farmers to:\n\n-    Monitor expected spoilage\n\n-    Book cold storage or transport slots\n\n-    View optimal harvest/market times"
  },
  {
    "objectID": "documentation.html#real-world-models-to-re-implement",
    "href": "documentation.html#real-world-models-to-re-implement",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.2 Real-World Models to Re-Implement",
    "text": "6.2 Real-World Models to Re-Implement\n\n\n\n\n\n\n\n\nReal- World Solution\nFunction\nRe-Implementation\n\n\n\n\nColdHubs (Nigeria)\nSolar - powered walk in cold rooms\nExpand via co-op partnerships or youth-owned units\n\n\nTwiga Foods (Kenya)\nDigital supply chain, logistics & demand matching\nDevelop a local app connecting smallholders to bulk buyers\n\n\nHello Tractor (Nigeria)\nTractor sharing platform\nExtend to cold truck or mobile dryer sharing\n\n\nKoolboks (Africa)\nSolar freezers with pay-as-you-go\nUse for high-spoilage zones in fruit & vegetable corridors\n\n\nAgUnity (Global)\nBlockchain recordkeeping for farmers\nPilot digital ledgers for PHL tracking and transparency"
  },
  {
    "objectID": "documentation.html#impact-for-youth",
    "href": "documentation.html#impact-for-youth",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.3 Impact for Youth",
    "text": "6.3 Impact for Youth\n\nUnlocks new agri-business models (e.g., storage-as-a-service).\nBuilds digital skills through mobile app management.\nIncreases profitability and encourages retention in the value chain."
  },
  {
    "objectID": "documentation.html#prototype-features-bonus",
    "href": "documentation.html#prototype-features-bonus",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.4 Prototype Features (Bonus)",
    "text": "6.4 Prototype Features (Bonus)\n\nSmallholder version: SMS interface to book storage or transport\nInvestor dashboard: Highlight PHL investment needs by region\nFarmer education popups: e.g., “Dry maize to 13% moisture before storing”"
  },
  {
    "objectID": "documentation.html#conclusion",
    "href": "documentation.html#conclusion",
    "title": "Reducing Post-Harvest Losses",
    "section": "6.5 Conclusion",
    "text": "6.5 Conclusion\nBy combining predictive analytics, mobile platforms, and logistics innovation, this solution empowers Nigeria’s youth to lead a revolution in agricultural efficiency — reducing waste and turning risk into opportunity."
  },
  {
    "objectID": "clean/clean.html",
    "href": "clean/clean.html",
    "title": "Processing Post-Harvest datasets",
    "section": "",
    "text": "import pandas as pd\ndef transform_data(sheets_dict: dict[pd.DataFrame], \n                   lookup: dict[str,str], \n                   file_origin: str) -&gt; pd.DataFrame:\n    # mapping from file_origin to rec_type letter\n    rec_map = {\n        \"harvested_area\": \"H\",\n        \"physical_area\":  \"A\",\n        \"yield\":          \"Y\",\n        \"production\":     \"P\"\n    }\n    # mapping tech suffix → human label\n    tech_map = {\n        \"A\": \"all technologies\",\n        \"I\": \"irrigation\",\n        \"R\": \"rainfed\"\n    }\n    rec_code = rec_map[file_origin]\n    \n    long_dfs = []\n    for sheet_name, df in sheets_dict.items():\n        # 1) infer tech_type from sheet name suffix (_TA, _TI, _TR → A, I, R)\n        if sheet_name.endswith(\"(TA)\"):\n            tech = \"A\"\n        elif sheet_name.endswith(\"(TI)\"):\n            tech = \"I\"\n        elif sheet_name.endswith(\"(TR)\"):\n            tech = \"R\"\n        else:\n            raise ValueError(f\"Unrecognized tech suffix in '{sheet_name}'\")\n        \n        # 2) Rename x/y → latitude/longitude\n        df = df.rename(columns={\n            \"x\": lookup[\"x\"],\n            \"y\": lookup[\"y\"]\n        })\n        \n        # 3) Rename each crop column: e.g. BANA_I → Banana_I\n        rename_map = {}\n        for col in df.columns:\n            if col.upper().endswith(f\"_{tech}\"):\n                prefix = col.rsplit(\"_\", 1)[0].lower()  # e.g. \"bana\"\n                full_crop = lookup.get(prefix)\n                if full_crop is None:\n                    # skip any non-crop or unexpected\n                    continue\n                rename_map[col] = f\"{full_crop}_{tech}\"\n        df = df.rename(columns=rename_map)\n        \n        # 4) Melt to long: keep all non-crop columns as id_vars\n        crop_cols = list(rename_map.values())\n        id_vars = [c for c in df.columns if c not in crop_cols]\n        df_long = df.melt(\n            id_vars=id_vars,\n            value_vars=crop_cols,\n            var_name=\"variable\",\n            value_name=\"value\"\n        )\n        \n        # 5) Split “variable” → Crop type & tech_type\n        df_long[\"tech_type\"] = df_long[\"variable\"].str[-1]\n        df_long[\"Crop type\"] = df_long[\"variable\"].str[:-2]\n        df_long = df_long.drop(columns=[\"variable\"])\n        \n        # 6) Add water‐management regime & rec_type\n        df_long[\"water‐management regime\"] = df_long[\"tech_type\"].map(tech_map)\n        df_long[\"rec_type\"] = rec_code\n        \n        # 7) Reorder & select final columns\n        final_cols = [\n            lookup[\"y\"],              # latitude of pixel center\n            lookup[\"x\"],              # longitude of pixel center\n            \"Crop type\",\n            \"tech_type\",\n            \"water‐management regime\",\n            \"rec_type\",\n            \"ADM1_NAME\",\n            \"ADM2_NAME\",\n            \"unit\",\n            \"grid_code\",\n            \"year_data\",\n            \"value\"\n        ]\n        # (rename latitude/longitude to the exact strings)\n        df_long = df_long[final_cols]\n        \n        long_dfs.append(df_long)\n    \n    # 8) Concatenate all tech-types for this file\n    result = pd.concat(long_dfs, ignore_index=True)\n    return result\n\n# Example usage:\n# import json\n# lookup = json.load(open(\"lookup.json\"))\n# harvested_sheets = pd.read_excel(\"harvested_area.xlsx\", sheet_name=None)\n# ha_long = transform_data(harvested_sheets, lookup, \"harvested_area\")\n# physical_sheets = pd.read_excel(\"physical_area.xlsx\", sheet_name=None)\n# pa_long = transform_data(physical_sheets, lookup, \"physical_area\")\n# ... and similarly for yield & production\nimport json\nlookup = json.load(open(\"lookup.json\"))\nharvested_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/harvested_area.xlsx\", sheet_name=None)\nha_long = transform_data(harvested_sheets, lookup, \"harvested_area\")\nphysical_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/Physical_area.xlsx\", sheet_name=None)\npa_long = transform_data(physical_sheets, lookup, \"physical_area\")\nha_long\n\n\n\n\n\n\n\n\nlongitude of pixel center\nlatitude of pixel center\nCrop type\ntech_type\nwater‐management regime\nrec_type\nADM1_NAME\nADM2_NAME\nunit\ngrid_code\nyear_data\nvalue\n\n\n\n\n0\n13.87500\n5.54167\nBanana\nA\nall technologies\nH\nSokoto\nIllela\nha\n3946386\navg(2019-2021)\n0.0\n\n\n1\n13.79170\n5.37500\nBanana\nA\nall technologies\nH\nSokoto\nGada\nha\n3950704\navg(2019-2021)\n0.0\n\n\n2\n13.79170\n5.79167\nBanana\nA\nall technologies\nH\nSokoto\nIllela\nha\n3950709\navg(2019-2021)\n0.0\n\n\n3\n13.70830\n4.70833\nBanana\nA\nall technologies\nH\nSokoto\nGudu\nha\n3955016\navg(2019-2021)\n0.0\n\n\n4\n13.70830\n4.79167\nBanana\nA\nall technologies\nH\nSokoto\nGudu\nha\n3955017\navg(2019-2021)\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1136333\n4.37500\n6.54167\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4438878\navg(2019-2021)\n0.7\n\n\n1136334\n4.37500\n6.62500\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4438879\navg(2019-2021)\n17.7\n\n\n1136335\n4.37500\n6.79167\nYams\nR\nrainfed\nH\nRivers\nAkuku-Toru\nha\n4438881\navg(2019-2021)\n1.9\n\n\n1136336\n4.29167\n6.12500\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4443193\navg(2019-2021)\n11.1\n\n\n1136337\n4.29167\n6.20833\nYams\nR\nrainfed\nH\nBayelsa\nBrass\nha\n4443194\navg(2019-2021)\n16.8\n\n\n\n\n1136338 rows × 12 columns\nlookup = json.load(open(\"lookup.json\"))\nProduction_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/Production.xlsx\", sheet_name=None)\nProd_long = transform_data(Production_sheets, lookup, \"production\")\nyield_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/yield.xlsx\", sheet_name=None)\nyield_long = transform_data(yield_sheets, lookup, \"yield\")\n# Save the transformed data to excel (XLSX) files\nha_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/harvested_long.xlsx\", index=False)\npa_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/physical_long.xlsx\", index=False)\nyield_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/yield_long.xlsx\", index=False)\nProd_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/production_long.xlsx\", index=False)"
  },
  {
    "objectID": "clean/clean.html#other-datasets",
    "href": "clean/clean.html#other-datasets",
    "title": "Processing Post-Harvest datasets",
    "section": "Other datasets",
    "text": "Other datasets\n\nimport os\nimport pandas as pd\n\ndef extract_data(folder_path):\n    extracted_data = {}\n    suffix_counter = {}\n\n    for file_name in os.listdir(folder_path):\n        file_path = os.path.join(folder_path, file_name)\n        base_name, ext = os.path.splitext(file_name)\n\n        if ext.lower() in ['.csv', '.xlsx', '.xls']:\n            try:\n                if ext.lower() == '.csv':\n                    # Single DataFrame for CSV\n                    df_dict = {base_name: pd.read_csv(file_path)}\n                else:\n                    # Read all sheets into a dict of DataFrames\n                    df_dict = pd.read_excel(file_path, sheet_name=None)\n                    # Prefix sheet names with base filename\n                    df_dict = {f\"{base_name}_{sheet_name}\": df\n                               for sheet_name, df in df_dict.items()}\n\n                for key, df in df_dict.items():\n                    unique_key = key\n                    # Handle key collisions\n                    if unique_key in extracted_data:\n                        # Initialize counter for this key if needed\n                        if key not in suffix_counter:\n                            suffix_counter[key] = 1\n                        suffix_counter[key] += 1\n                        unique_key = f\"{key}_{suffix_counter[key]}\"\n\n                    extracted_data[unique_key] = df\n\n            except Exception as e:\n                print(f\"Error processing file {file_name}: {e}\")\n\n    return extracted_data\n\n\n#Specify full folder path to the dataset\ndf = extract_data(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset\")\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_30472\\4012688409.py:16: DtypeWarning: Columns (1,3,4,5,6,7,8,9,10,11,12) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_dict = {base_name: pd.read_csv(file_path)}\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_30472\\4012688409.py:16: DtypeWarning: Columns (4,5,6,9,14,15) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_dict = {base_name: pd.read_csv(file_path)}\n\n\n\ndf.keys()\n\ndict_keys(['Data', 'FAOSTAT_data_en_5-8-2025', 'global-market-monitor_subnational', 'nga-rainfall-adm2-full', 'Population data', 'wfp_food_prices_nga'])\n\n\n\nlogistics= df['Data']\n\n\nlogistics.columns\n\nIndex(['m49_code', 'country', 'region', 'cpc_code', 'commodity', 'year',\n       'loss_percentage', 'loss_percentage_original', 'loss_quantity',\n       'activity', 'food_supply_stage', 'treatment', 'cause_of_loss',\n       'sample_size', 'method_data_collection', 'reference', 'url', 'notes'],\n      dtype='object')\n\n\n\nlogistics=logistics[(logistics['year'] &gt;= 2019) & (logistics['year'] &lt;= 2021)][['m49_code', 'country', 'region', 'cpc_code', 'commodity', 'year',\n        'loss_percentage', 'loss_percentage_original', 'loss_quantity',\n        'activity', 'food_supply_stage', 'treatment', 'cause_of_loss',\n        'sample_size', 'method_data_collection']]\n\n\nlogistics.fillna(\"N/A\", inplace=True)\n\n\nlogistics\n\n\n\n\n\n\n\n\nm49_code\ncountry\nregion\ncpc_code\ncommodity\nyear\nloss_percentage\nloss_percentage_original\nloss_quantity\nactivity\nfood_supply_stage\ntreatment\ncause_of_loss\nsample_size\nmethod_data_collection\n\n\n\n\n0\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n2.372590\n2.37259\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n1\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n4.585730\n4.58573\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n2\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n6.420000\n6.42\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n3\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n4.000000\n4\nN/A\nDrying\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n4\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2021\n1.320000\n1.32\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n5\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n2.500000\n2.5\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n6\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n4.403330\n4.40333\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n7\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n3.137140\n3.13714\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n8\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n0.980316\n0.980316\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n9\n566\nNigeria\nBenue State\n113.0\nRice\n2021\n1.250000\n1.25\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n10\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n3.600000\n3.6\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n11\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n2.592950\n2.59295\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n12\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n4.550000\n4.55\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n13\n566\nNigeria\nNiger\n114.0\nSorghum\n2021\n2.166670\n2.16667\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n14\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n3.500000\n3.5\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n15\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n2.000000\n2\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n16\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n1.103170\n1.10317\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n17\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n2.500000\n2.5\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n18\n566\nNigeria\nN/A\n118.0\nMillet\n2021\n0.793649\n0.793649\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n19\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n6.420000\n6.42\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n20\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n1.320000\n1.32\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n21\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n4.000000\n4\nN/A\nDrying\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n22\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n4.716320\n4.71632\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n23\n566\nNigeria\nKatsina\n112.0\nMaize (corn)\n2020\n2.372950\n2.37295\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n24\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n1.250000\n1.25\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n25\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n2.500000\n2.5\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n26\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n3.137140\n3.13714\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n27\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n0.931262\n0.931262\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n28\n566\nNigeria\nPlateau\n113.0\nRice\n2020\n4.403330\n4.40333\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n29\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n2.604060\n2.60406\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n30\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n2.166670\n2.16667\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n31\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n4.550000\n4.55\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n32\n566\nNigeria\nNiger\n114.0\nSorghum\n2020\n3.600000\n3.6\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n33\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n1.315950\n1.31595\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n34\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n3.500000\n3.5\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n35\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n0.851044\n0.851044\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n36\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n2.500000\n2.5\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n37\n566\nNigeria\nBorno\n118.0\nMillet\n2020\n2.000000\n2\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n38\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n1.320000\n1.32\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n39\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n4.718790\n4.71879\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n40\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n2.372890\n2.37289\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n41\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n4.000000\n4\nN/A\nDrying\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n42\n566\nNigeria\nKaduna\n112.0\nMaize (corn)\n2019\n6.420000\n6.42\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n43\n566\nNigeria\nBenue\n113.0\nRice\n2019\n1.250000\n1.25\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n44\n566\nNigeria\nBenue\n113.0\nRice\n2019\n2.500000\n2.5\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n45\n566\nNigeria\nBenue\n113.0\nRice\n2019\n3.137140\n3.13714\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n46\n566\nNigeria\nBenue\n113.0\nRice\n2019\n4.403330\n4.40333\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n47\n566\nNigeria\nBenue\n113.0\nRice\n2019\n0.930734\n0.930734\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n48\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n4.550000\n4.55\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n49\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n3.600000\n3.6\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n50\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n2.604770\n2.60477\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n51\n566\nNigeria\nEbonyi\n114.0\nSorghum\n2019\n2.166670\n2.16667\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n52\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n0.851228\n0.851228\nN/A\nStorage\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n53\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n3.500000\n3.5\nN/A\nDrying, Harvesting\nHarvest\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n54\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n2.500000\n2.5\nN/A\nTransportation\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n55\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n1.316630\n1.31663\nN/A\nWinnowing\nFarm\nN/A\nN/A\nN/A\nModelled Estimates\n\n\n56\n566\nNigeria\nAdamawa\n118.0\nMillet\n2019\n2.000000\n2\nN/A\nShelling, Threshing\nN/A\nN/A\nN/A\nN/A\nModelled Estimates"
  },
  {
    "objectID": "documentation.html#dataset-summary-table",
    "href": "documentation.html#dataset-summary-table",
    "title": "Reducing Post-Harvest Losses",
    "section": "3.2 Dataset Summary Table",
    "text": "3.2 Dataset Summary Table\n\n\n\n\n\n\n\n\nDataset Name\nDescription\nSource\n\n\n\n\nPost-Harvest Loss Dataset\nData on post-harvest loss amounts (in tonnes), percentage of production lost, food price impacts, logistics factors, and production volumes.\nFAOSTAT 2017, The Herald, AfricaCheck36, World Bank Open Data, UN Population Prospects, WRI CAIT Climate Data Explorer, FAO et al (2019), WB Calculations\n\n\nFood Price Dataset\nData on food price levels, variations by crop, and economic implications of post-harvest losses.\nWorld Bank Open Data, The Herald\n\n\nLogistics Dataset\nData on storage and transportation capacity (in tonnes) and losses due to poor infrastructure.\nAfricaCheck36, FAOSTAT 2017\n\n\nMarket Dataset\nInformation on market accessibility, regional trade flows, and volumes affected by post-harvest losses.\nWorld Bank Open Data, FAOSTAT\n\n\nPopulation Dataset\nData on current population, food insecurity prevalence (44%), and projections (50% increase by 2050).\nUN Population Prospects, World Bank Open Data\n\n\nOther dataset\nThese includes combined metrics based on crop type, population\nFAO Food Loss and Waste Platform, HarvestChoice SPAM, Harvard Dataverse"
  },
  {
    "objectID": "Python/clean.html",
    "href": "Python/clean.html",
    "title": "Processing Post-Harvest datasets",
    "section": "",
    "text": "import pandas as pd\ndef transform_data(sheets_dict: dict[pd.DataFrame], \n                   lookup: dict[str,str], \n                   file_origin: str) -&gt; pd.DataFrame:\n    # mapping from file_origin to rec_type letter\n    rec_map = {\n        \"harvested_area\": \"H\",\n        \"physical_area\":  \"A\",\n        \"yield\":          \"Y\",\n        \"production\":     \"P\"\n    }\n    # mapping tech suffix → human label\n    tech_map = {\n        \"A\": \"all technologies\",\n        \"I\": \"irrigation\",\n        \"R\": \"rainfed\"\n    }\n    rec_code = rec_map[file_origin]\n    \n    long_dfs = []\n    for sheet_name, df in sheets_dict.items():\n        # 1) infer tech_type from sheet name suffix (_TA, _TI, _TR → A, I, R)\n        if sheet_name.endswith(\"(TA)\"):\n            tech = \"A\"\n        elif sheet_name.endswith(\"(TI)\"):\n            tech = \"I\"\n        elif sheet_name.endswith(\"(TR)\"):\n            tech = \"R\"\n        else:\n            raise ValueError(f\"Unrecognized tech suffix in '{sheet_name}'\")\n        \n        # 2) Rename x/y → latitude/longitude\n        df = df.rename(columns={\n            \"x\": lookup[\"x\"],\n            \"y\": lookup[\"y\"]\n        })\n        \n        # 3) Rename each crop column: e.g. BANA_I → Banana_I\n        rename_map = {}\n        for col in df.columns:\n            if col.upper().endswith(f\"_{tech}\"):\n                prefix = col.rsplit(\"_\", 1)[0].lower()  # e.g. \"bana\"\n                full_crop = lookup.get(prefix)\n                if full_crop is None:\n                    # skip any non-crop or unexpected\n                    continue\n                rename_map[col] = f\"{full_crop}_{tech}\"\n        df = df.rename(columns=rename_map)\n        \n        # 4) Melt to long: keep all non-crop columns as id_vars\n        crop_cols = list(rename_map.values())\n        id_vars = [c for c in df.columns if c not in crop_cols]\n        df_long = df.melt(\n            id_vars=id_vars,\n            value_vars=crop_cols,\n            var_name=\"variable\",\n            value_name=\"value\"\n        )\n        \n        # 5) Split “variable” → Crop type & tech_type\n        df_long[\"tech_type\"] = df_long[\"variable\"].str[-1]\n        df_long[\"Crop type\"] = df_long[\"variable\"].str[:-2]\n        df_long = df_long.drop(columns=[\"variable\"])\n        \n        # 6) Add water‐management regime & rec_type\n        df_long[\"water‐management regime\"] = df_long[\"tech_type\"].map(tech_map)\n        df_long[\"rec_type\"] = rec_code\n        \n        # 7) Reorder & select final columns\n        final_cols = [\n            lookup[\"y\"],              # latitude of pixel center\n            lookup[\"x\"],              # longitude of pixel center\n            \"Crop type\",\n            \"tech_type\",\n            \"water‐management regime\",\n            \"rec_type\",\n            \"ADM1_NAME\",\n            \"ADM2_NAME\",\n            \"unit\",\n            \"grid_code\",\n            \"year_data\",\n            \"value\"\n        ]\n        # (rename latitude/longitude to the exact strings)\n        df_long = df_long[final_cols]\n        \n        long_dfs.append(df_long)\n    \n    # 8) Concatenate all tech-types for this file\n    result = pd.concat(long_dfs, ignore_index=True)\n    return result\n\n# Example usage:\n# import json\n# lookup = json.load(open(\"lookup.json\"))\n# harvested_sheets = pd.read_excel(\"harvested_area.xlsx\", sheet_name=None)\n# ha_long = transform_data(harvested_sheets, lookup, \"harvested_area\")\n# physical_sheets = pd.read_excel(\"physical_area.xlsx\", sheet_name=None)\n# pa_long = transform_data(physical_sheets, lookup, \"physical_area\")\n# ... and similarly for yield & production\nimport json\nlookup = json.load(open(\"lookup.json\"))\nharvested_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/harvested_area.xlsx\", sheet_name=None)\nha_long = transform_data(harvested_sheets, lookup, \"harvested_area\")\nphysical_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/Physical_area.xlsx\", sheet_name=None)\npa_long = transform_data(physical_sheets, lookup, \"physical_area\")\nlookup = json.load(open(\"lookup.json\"))\nProduction_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/Production.xlsx\", sheet_name=None)\nProd_long = transform_data(Production_sheets, lookup, \"production\")\nyield_sheets = pd.read_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/yield.xlsx\", sheet_name=None)\nyield_long = transform_data(yield_sheets, lookup, \"yield\")\n# Save the transformed data to excel (XLSX) files\nha_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/harvested_long.xlsx\", index=False)\npa_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/physical_long.xlsx\", index=False)\nyield_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/yield_long.xlsx\", index=False)\nProd_long.to_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/production_long.xlsx\", index=False)\n# harvest= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/harvested_long.csv\")\nphysical= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/physical_long.csv\")\nyield_data= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/yield_long.csv\")\nproduction= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/production_long.csv\")\nphysical.columns\n\nIndex(['longitude_of_pixel_center', 'latitude_of_pixel_center', 'crop_type',\n       'tech_type', 'water_management_regime', 'rec_type', 'state', 'town',\n       'unit', 'grid_code', 'year', 'value'],\n      dtype='object')\n# assume `df` is your long‐format DataFrame\nstate_summaries = (\n    production\n    .groupby([\n        \"state\",     # the state/province\n        \"rec_type\",      # H, A, Y, or P\n        \"crop_type\",     # e.g. Maize, Rice\n        \"tech_type\",     # A, I, or R\n        'water_management_regime',\n        \"year\"      # calendar year\n    ], as_index=False)\n    .agg(value_sum = (\"value\", \"sum\"))\n).sort_values(\n    by=[\"state\", \"crop_type\", \"tech_type\", \"rec_type\", \"year\"]\n)\nstate_summaries.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed_agg/production.xlsx\", index=False)\nstate_summaries\n\n\n\n\n\n\n\n\nstate\nrec_type\ncrop_type\ntech_type\nwater_management_regime\nyear\nvalue_sum\n\n\n\n\n0\nAbia\nP\nArabic Coffee\nA\nall technologies\navg(2019-2021)\n0.0\n\n\n1\nAbia\nP\nArabic Coffee\nR\nrainfed\navg(2019-2021)\n0.0\n\n\n2\nAbia\nP\nBanana\nA\nall technologies\navg(2019-2021)\n0.0\n\n\n3\nAbia\nP\nBanana\nR\nrainfed\navg(2019-2021)\n0.0\n\n\n4\nAbia\nP\nBarley\nA\nall technologies\navg(2019-2021)\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4733\nZamfara\nP\nWheat\nI\nirrigation\navg(2019-2021)\n1122.3\n\n\n4734\nZamfara\nP\nWheat\nR\nrainfed\navg(2019-2021)\n184.8\n\n\n4735\nZamfara\nP\nYams\nA\nall technologies\navg(2019-2021)\n593726.5\n\n\n4736\nZamfara\nP\nYams\nI\nirrigation\navg(2019-2021)\n0.0\n\n\n4737\nZamfara\nP\nYams\nR\nrainfed\navg(2019-2021)\n593726.5\n\n\n\n\n4738 rows × 7 columns"
  },
  {
    "objectID": "Python/clean.html#other-datasets",
    "href": "Python/clean.html#other-datasets",
    "title": "Processing Post-Harvest datasets",
    "section": "Other datasets",
    "text": "Other datasets\n\nimport os\nimport pandas as pd\n\ndef extract_data(folder_path):\n    extracted_data = {}\n    suffix_counter = {}\n\n    for file_name in os.listdir(folder_path):\n        file_path = os.path.join(folder_path, file_name)\n        base_name, ext = os.path.splitext(file_name)\n\n        if ext.lower() in ['.csv', '.xlsx', '.xls']:\n            try:\n                if ext.lower() == '.csv':\n                    # Single DataFrame for CSV\n                    df_dict = {base_name: pd.read_csv(file_path)}\n                else:\n                    # Read all sheets into a dict of DataFrames\n                    df_dict = pd.read_excel(file_path, sheet_name=None)\n                    # Prefix sheet names with base filename\n                    df_dict = {f\"{base_name}_{sheet_name}\": df\n                               for sheet_name, df in df_dict.items()}\n\n                for key, df in df_dict.items():\n                    unique_key = key\n                    # Handle key collisions\n                    if unique_key in extracted_data:\n                        # Initialize counter for this key if needed\n                        if key not in suffix_counter:\n                            suffix_counter[key] = 1\n                        suffix_counter[key] += 1\n                        unique_key = f\"{key}_{suffix_counter[key]}\"\n\n                    extracted_data[unique_key] = df\n\n            except Exception as e:\n                print(f\"Error processing file {file_name}: {e}\")\n\n    return extracted_data\n\n\n#Specify full folder path to the dataset\ndf = extract_data(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset\")\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22596\\4012688409.py:16: DtypeWarning: Columns (1,3,4,5,6,7,8,9,10,11,12) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_dict = {base_name: pd.read_csv(file_path)}\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_22596\\4012688409.py:16: DtypeWarning: Columns (4,5,6,9,14,15) have mixed types. Specify dtype option on import or set low_memory=False.\n  df_dict = {base_name: pd.read_csv(file_path)}\n\n\n\ndf.keys()\n\ndict_keys(['Data', 'FAOSTAT_data_en_5-8-2025', 'global-market-monitor_subnational', 'nga-rainfall-adm2-full', 'Population data', 'wfp_food_prices_nga'])\n\n\n\nlogistics= df['Data']\nfood_price= df['wfp_food_prices_nga']\nrainfall= df['nga-rainfall-adm2-full']\npopulation= df['Population data']\nmarket = df['global-market-monitor_subnational']\ncombined_metrics = df['FAOSTAT_data_en_5-8-2025']\n\n\nlogistics.columns\n\nIndex(['m49_code', 'country', 'region', 'cpc_code', 'commodity', 'year',\n       'loss_percentage', 'loss_percentage_original', 'loss_quantity',\n       'activity', 'food_supply_stage', 'treatment', 'cause_of_loss',\n       'sample_size', 'method_data_collection', 'reference', 'url', 'notes'],\n      dtype='object')\n\n\n\nlogistics=logistics[(logistics['year'] &gt;= 2019) & (logistics['year'] &lt;= 2021)][['m49_code', 'country', 'region', 'cpc_code', 'commodity', 'year',\n        'loss_percentage', 'loss_percentage_original', 'loss_quantity',\n        'activity', 'food_supply_stage', 'treatment', 'cause_of_loss',\n        'sample_size', 'method_data_collection']]\n\n\nlogistics.fillna(\"N/A\", inplace=True)\n\n\nlogistics.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/logistics.xlsx\", index=False)\n\n\nFood Price\n\nfood_price.drop(index= 0, inplace= True)\nfood_price.rename(columns={\n                'admin1': 'State',\n                'admin2': 'town',\n                'price': 'price(NGN)',\n                'usdprice': 'price(USD)'\n            }, inplace=True)\nfood_price['year']= pd.to_datetime(food_price['date']).dt.year\nfood_price = food_price[(food_price['year'] &gt;= 2019) & (food_price['year'] &lt;= 2021)]\n\n\nfood_price.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/food_price.xlsx\", index=False)\n\n\n\nMarket data\n\nmarket.drop(index= 0, inplace= True)\nmarket.rename(columns={\n                'Admin1': 'State',\n            }, inplace=True)\nmarket['Year'] = pd.to_datetime(market['Date']).dt.year\n\n#Handling missing values\nmarket.fillna(\"N/A\", inplace=True)\n\nmarket= market[['Date', 'MonthlyVersion', 'FrequencyName',\n       'State', 'MainStapleFood', 'PriceType',\n       'CaloricContribution', 'QuarterlyChangeNSA', 'MonthlyChangeNSA',\n       'QuarterlyChangeSA', 'MonthlyChangeSA', 'YoYChangeQuarter',\n       'YoYChangeMonth', 'PriceTrendQuarter', 'PriceTrendMonth',\n       'QuarterlyCostShare', 'TotImpactQuarterlyChange',\n       'TotImpactQuarterlyCode', 'TotImpactMonthlyChange',\n       'TotImpactMonthlyCode']]\n\n\nmarket.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/market.xlsx\", index=False)\n\n\nmarket\n\n\n\n\n\n\n\n\nDate\nMonthlyVersion\nFrequencyName\nState\nMainStapleFood\nPriceType\nCaloricContribution\nQuarterlyChangeNSA\nMonthlyChangeNSA\nQuarterlyChangeSA\nMonthlyChangeSA\nYoYChangeQuarter\nYoYChangeMonth\nPriceTrendQuarter\nPriceTrendMonth\nQuarterlyCostShare\nTotImpactQuarterlyChange\nTotImpactQuarterlyCode\nTotImpactMonthlyChange\nTotImpactMonthlyCode\n\n\n\n\n1\n3/1/2021\n55\nMonthly\nAbia\nSorghum (white)\nWholesale\n13\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n21\nN/A\nN/A\nN/A\nN/A\n\n\n2\n3/1/2021\n55\nMonthly\nAbia\nMaize (white)\nWholesale\n8\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n7\nN/A\nN/A\nN/A\nN/A\n\n\n3\n3/1/2021\n55\nMonthly\nAbia\nBread\nRetail\n5\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\n\n4\n3/1/2021\n55\nMonthly\nAbia\nRice (imported)\nWholesale\n8\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n20\nN/A\nN/A\nN/A\nN/A\n\n\n5\n3/1/2021\n55\nMonthly\nAbia\nGari (white)\nWholesale\n10\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n15\nN/A\nN/A\nN/A\nN/A\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2908\n6/1/2023\n82\nMonthly\nZamfara\nGari (white)\nWholesale\n10\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\nN/A\n\n\n\n2909\n6/1/2023\n82\nMonthly\nZamfara\nSorghum (white)\nWholesale\n13\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\nN/A\n\n\n\n2910\n6/1/2023\n82\nMonthly\nZamfara\nBread\nRetail\n5\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\nN/A\n\n\n\n2911\n6/1/2023\n82\nMonthly\nZamfara\nMaize (white)\nWholesale\n8\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\nN/A\n\n\n\n2912\n6/1/2023\n82\nMonthly\nZamfara\nMillet\nWholesale\n11\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\nN/A\n\n\n\n\n\n2912 rows × 20 columns\n\n\n\n\n\nPopulation\n\ncombined_metrics.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/combined_metrics.xlsx\", index=False)\n\n\ncombined_metrics=combined_metrics[['Domain Code', 'Domain', 'Area Code (M49)', 'Area', 'Element Code',\n       'Element', 'Item Code (FBS)', 'Item', 'Year', 'Unit',\n       'Value', 'Flag', 'Flag Description']]\n\n\npopulation.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/population.xlsx\", index=False)\n\n\n\nRainfall\n\n# rainfall.drop(index= 0, inplace= True)\nrainfall.rename(columns={\n                'Admin1': 'State',\n            }, inplace=True)\nrainfall['Year'] = pd.to_datetime(rainfall['date']).dt.year\n\n#Handling missing values\nrainfall.fillna(\"N/A\", inplace=True)\n\nrainfall= rainfall[(rainfall['year'] &gt;= 2019) & (rainfall['year'] &lt;= 2021)][['date', 'adm2_id', 'ADM2_PCODE', 'n_pixels', 'rfh', 'rfh_avg', 'r1h',\n       'r1h_avg', 'r3h', 'r3h_avg', 'rfq', 'r1q', 'r3q', 'version']]\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nFile c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805, in Index.get_loc(self, key)\n   3804 try:\n-&gt; 3805     return self._engine.get_loc(casted_key)\n   3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas\\\\_libs\\\\hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas\\\\_libs\\\\hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'year'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\nCell In[54], line 10\n      7 #Handling missing values\n      8 rainfall.fillna(\"N/A\", inplace=True)\n---&gt; 10 rainfall= rainfall[(rainfall['year'] &gt;= 2019) & (rainfall['year'] &lt;= 2021)][['date', 'adm2_id', 'ADM2_PCODE', 'n_pixels', 'rfh', 'rfh_avg', 'r1h',\n     11        'r1h_avg', 'r3h', 'r3h_avg', 'rfq', 'r1q', 'r3q', 'version']]\n\nFile c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pandas\\core\\frame.py:4102, in DataFrame.__getitem__(self, key)\n   4100 if self.columns.nlevels &gt; 1:\n   4101     return self._getitem_multilevel(key)\n-&gt; 4102 indexer = self.columns.get_loc(key)\n   4103 if is_integer(indexer):\n   4104     indexer = [indexer]\n\nFile c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812, in Index.get_loc(self, key)\n   3807     if isinstance(casted_key, slice) or (\n   3808         isinstance(casted_key, abc.Iterable)\n   3809         and any(isinstance(x, slice) for x in casted_key)\n   3810     ):\n   3811         raise InvalidIndexError(key)\n-&gt; 3812     raise KeyError(key) from err\n   3813 except TypeError:\n   3814     # If we have a listlike key, _check_indexing_error will raise\n   3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n   3816     #  the TypeError.\n   3817     self._check_indexing_error(key)\n\nKeyError: 'year'\n\n\n\n\nrainfall.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/rainfall.xlsx\", index=False)\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[50], line 1\n----&gt; 1 rainfall.to_excel(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/processed/rainfall.xlsx\", index=False)\n\nFile c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pandas\\util\\_decorators.py:333, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs)\n    327 if len(args) &gt; num_allow_args:\n    328     warnings.warn(\n    329         msg.format(arguments=_format_argument_list(allow_args)),\n    330         FutureWarning,\n    331         stacklevel=find_stack_level(),\n    332     )\n--&gt; 333 return func(*args, **kwargs)\n\nFile c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pandas\\core\\generic.py:2417, in NDFrame.to_excel(self, excel_writer, sheet_name, na_rep, float_format, columns, header, index, index_label, startrow, startcol, engine, merge_cells, inf_rep, freeze_panes, storage_options, engine_kwargs)\n   2404 from pandas.io.formats.excel import ExcelFormatter\n   2406 formatter = ExcelFormatter(\n   2407     df,\n   2408     na_rep=na_rep,\n   (...)\n   2415     inf_rep=inf_rep,\n   2416 )\n-&gt; 2417 formatter.write(\n   2418     excel_writer,\n   2419     sheet_name=sheet_name,\n   2420     startrow=startrow,\n   2421     startcol=startcol,\n   2422     freeze_panes=freeze_panes,\n   2423     engine=engine,\n   2424     storage_options=storage_options,\n   2425     engine_kwargs=engine_kwargs,\n   2426 )\n\nFile c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pandas\\io\\formats\\excel.py:931, in ExcelFormatter.write(self, writer, sheet_name, startrow, startcol, freeze_panes, engine, storage_options, engine_kwargs)\n    929 num_rows, num_cols = self.df.shape\n    930 if num_rows &gt; self.max_rows or num_cols &gt; self.max_cols:\n--&gt; 931     raise ValueError(\n    932         f\"This sheet is too large! Your sheet size is: {num_rows}, {num_cols} \"\n    933         f\"Max sheet size is: {self.max_rows}, {self.max_cols}\"\n    934     )\n    936 if engine_kwargs is None:\n    937     engine_kwargs = {}\n\nValueError: This sheet is too large! Your sheet size is: 1219345, 14 Max sheet size is: 1048576, 16384\n\n\n\n\nrainfall\n\n\n\n\n\n\n\n\ndate\nadm2_id\nADM2_PCODE\nn_pixels\nrfh\nrfh_avg\nr1h\nr1h_avg\nr3h\nr3h_avg\nrfq\nr1q\nr3q\nversion\n\n\n\n\n0\n#date\n#adm2+id\n#adm2+code\n#indicator+n_pixels+num\n#indicator+rfh+num\n#indicator+rfh_avg+num\n#indicator+r1h+num\n#indicator+r1h_avg+num\n#indicator+r3h+num\n#indicator+r3h_avg+num\n#indicator+rfq+pct\n#indicator+r1q+pct\n#indicator+r3q+pct\n#status\n\n\n1\n1981-01-01\n22980\nNG029014\n28.0\n4.3571\n3.2274\nNaN\nNaN\nNaN\nNaN\n113.7317\nNaN\nNaN\nfinal\n\n\n2\n1981-01-11\n22980\nNG029014\n28.0\n2.75\n3.7071\nNaN\nNaN\nNaN\nNaN\n89.0074\nNaN\nNaN\nfinal\n\n\n3\n1981-01-21\n22980\nNG029014\n28.0\n7.0714\n6.0607\n14.1786\n12.9952\nNaN\nNaN\n109.1379\n105.146\nNaN\nfinal\n\n\n4\n1981-02-01\n22980\nNG029014\n28.0\n4.3214\n9.3012\n14.1429\n19.069\nNaN\nNaN\n65.1794\n83.0535\nNaN\nfinal\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1219340\n2025-03-11\n23001\nNG030013\n33.0\n57.0909\n33.0414\n94.2424\n68.3\n116.4242\n103.6051\n163.2192\n133.1321\n111.284\nfinal\n\n\n1219341\n2025-03-21\n23001\nNG030013\n33.0\n70.0909\n36.7737\n144.5758\n93.3232\n185.5152\n137.9192\n179.7563\n149.6041\n132.177\nfinal\n\n\n1219342\n2025-04-01\n23001\nNG030013\n33.0\n52.3333\n40.6788\n179.5152\n110.4939\n236.8485\n176.1283\n125.5141\n157.2819\n132.6228\nprelim\n\n\n1219343\n2025-04-11\n23001\nNG030013\n33.0\n65.7879\n43.4556\n188.2121\n120.9081\n301.6364\n217.0303\n146.0883\n151.4132\n137.2664\nprelim\n\n\n1219344\n2025-04-21\n23001\nNG030013\n33.0\n80.0\n44.0737\n198.1212\n128.2081\n379.6364\n256.3535\n173.2087\n150.5854\n146.2854\nprelim\n\n\n\n\n1219345 rows × 14 columns\n\n\n\n\nharvest= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/harvested_long.xlsx\")\nphysical= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/physical_long.xlsx\")\nyield_data= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/yield_long.xlsx\")\nproduction= pd.read_csv(\"C:/Users/USER/Downloads/Hackathon/AgricConnect-PHL/dataset/harvest_data/processed/production_long.xlsx\")"
  }
]